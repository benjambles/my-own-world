{
    // API Snippets
    "Resource Index":{
        "scope": "typescript",
        "prefix": "rsc",
        "description": "Add a skeleton resource index file",
        "body": [
            "import { createResource } from '@benjambles/mow-server/dist/routing/create-resource.js';",
            "import { DataModel } from '${3}../../app.js';",
            "import config from './config.js';",
            "",
            "/**",
            "* Routes on /${1:resourceName} and /${1}/*",
            "*/",
            "export default function ${1}(dataModel: DataModel) {",
            "    const ${2:collectionName} = dataModel.getKey('${2}');",
            "",
            "    return createResource(config)",
            "        .operation('get${1/^(.)(.*)/${1:/upcase}${2}/}', async (ctx) => {",
            "            ${0}",
            "        })",
            "        .get();",
            "}",
            "",
        ]
    },
    "Model File":{
        "scope": "typescript",
        "prefix": "mdl",
        "description": "Add a skeleton model file",
        "body": [
            "import { DeepPartial } from '@benjambles/js-lib/dist/index.js';",
            "import {",
            "    formatData,",
            "    getDataFormatter,",
            "    ModelOptions,",
            "} from '@benjambles/mow-server/dist/utils/data/index.js';",
            "import { omit } from '@benjambles/mow-server/dist/utils/data/objects.js';",
            "import { getObjectId, ModelResult } from '@benjambles/mow-server/dist/utils/db.js';",
            "import { randomUUID } from 'crypto';",
            "import { Db, ObjectId } from 'mongodb';",
            "import { Env } from '${3}../../../schema/env-schema.js';",
            "",
            "const restrictedKeys = ['isDeleted'] as const;",
            "",
            "//#region Types",
            "export interface ${1:singular} {",
            "    _id: ObjectId;",
            "    isDeleted: boolean;",
            "    ${0}",
            "}",
            "",
            "export type New${1:singular} = Omit<${1:singular}, '_id' | 'isDeleted'>;",
            "",
            "type ToStringKeys = '_id';",
            "",
            "type RestrictedKeys = (typeof restrictedKeys)[number];",
            "",
            "type ${1:singular}Response = Omit<${1:singular}, RestrictedKeys | ToStringKeys> & {",
            "    [key in ToStringKeys]: string;",
            "};",
            "//#endregion Types",
            "",
            "export function get${1/^(.)(.*)/${1:/upcase}${2}/}Model(db: Db, { ENC_SECRET }: Env) {",
            "    const formatOptions: ModelOptions = {",
            "        encrypted: [],",
            "        hmac: [],",
            "        readOnly: ['_id'],",
            "        salted: [],",
            "    };",
            "",
            "    const dataFormatter = formatData(getDataFormatter(ENC_SECRET, formatOptions));",
            "    const items = db.collection<${1:singular}>('${2:plural}');",
            "",
            "    const model = {",
            "        dataFormatter,",
            "        get: async function (",
            "            limit: number = 10,",
            "            skip: number = 0,",
            "        ): ModelResult<${1:singular}[]> {",
            "            const dbResult = await items",
            "                .find({ isDeleted: false }, { limit, projection: {}, skip })",
            "                .toArray();",
            "",
            "            return { ok: true, value: dbResult };",
            "        },",
            "",
            "        find: async function (uuid: string): ModelResult<${1:singular}> {",
            "            const dbResult = await items.findOne(",
            "                { _id: getObjectId(uuid), isDeleted: false },",
            "                { projection: { identities: 0 } },",
            "            );",
            "",
            "            return {",
            "                ok: !!dbResult,",
            "                value: dbResult,",
            "            };",
            "        },",
            "",
            "        create: async function (data: any): ModelResult<${1:singular}> {",
            "            const cleanData = await dataFormatter(data);",
            "            cleanData._id = getObjectId(randomUUID());",
            "            cleanData.isDeleted = false;",
            "",
            "            const { insertedId } = await items.insertOne(cleanData);",
            "",
            "            return await model.find(insertedId.toString());",
            "        },",
            "",
            "        update: async function (",
            "            uuid: string,",
            "            data: DeepPartial<${1:singular}>,",
            "        ): ModelResult<${1:singular}> {",
            "            const cleanData = await dataFormatter(data);",
            "            const { ok, value } = await items.findOneAndUpdate(",
            "                { _id: getObjectId(uuid) },",
            "                { set: cleanData },",
            "                { includeResultMetadata: true, projection: {} },",
            "            );",
            "",
            "            return { ok: !!ok, value };",
            "        },",
            "",
            "        delete: async function (uuid: string): ModelResult<number> {",
            "            const { matchedCount, modifiedCount } = await items.updateOne(",
            "                { _id: getObjectId(uuid) },",
            "                {",
            "                    set: { deletedOn: new Date(), isDeleted: true },",
            "                },",
            "            );",
            "",
            "            return {",
            "                ok: !!matchedCount && matchedCount === modifiedCount,",
            "                value: matchedCount,",
            "            };",
            "        },",
            "    };",
            "",
            "    return model;",
            "}",
            "",
            "export function cleanResponse(data: ${1:singular}): ${1:singular}Response {",
            "    return Object.assign(omit(data, restrictedKeys), { _id: data._id.toString() });",
            "}",
            "",
        ]
    },
    // OPEN API snippets for config.ts files
    "Add method": {
        "scope": "typescript",
        "prefix": "aop",
        "body": [
            "${1|get,delete,post,put,update|}: {", 
            "    tags: [$2],",
            "    summary: \"$3\",",
            "    description: \"$4\",",
            "    operationId: \"$5\",",
            "    parameters: [$6],",
            "    responses: {$7},",
            "    security: [$8]",
            "}${0}", 
        ],
        "description": "Creates a HTTP method body when defining OpenAPI config - for the verbs property"
    },
    "Route Config":{
        "scope": "typescript",
        "prefix": "cfg",
        "description": "A boilerplate snippet for creating a new resource",
        "body": [
            "export default {",
            "    openapi: '3.0.0',",
            "    info: {",
            "        title: '${1/^(.)(.*)/${1:/upcase}${2}/}',",
            "        description: '${0}Routes relating to the creation and management of ${1} for the platform.',",
            "        version: '1.0.0',",
            "    },",
            "    paths: {",
            "        '/${1:plural}': {",
            "            get: {",
            "                tags: ['${2:singular}'],",
            "                summary: 'Fetches all ${1} for the platform',",
            "                description: '',",
            "                operationId: 'get${1/^(.)(.*)/${1:/upcase}${2}/}',",
            "                parameters: [",
            "                    {",
            "                        name: 'limit',",
            "                        in: 'query',",
            "                        description: 'How many records to fetch',",
            "                        schema: {",
            "                            default: 10,",
            "                            format: 'int64',",
            "                            type: 'integer',",
            "                        },",
            "                    },",
            "                    {",
            "                        name: 'offset',",
            "                        in: 'query',",
            "                        description: 'How many records to skip',",
            "                        schema: {",
            "                            default: 0,",
            "                            format: 'int64',",
            "                            type: 'integer',",
            "                        },",
            "                    }",
            "                ],",
            "                responses: {},",
            "                security: []",
            "            },",
            "            'post': {",
            "                tags: ['${2}'],",
            "                summary: 'Add a new ${2} to the platform',",
            "                description: '',",
            "                operationId: 'create${2/^(.)(.*)/${1:/upcase}${2}/}',",
            "                parameters: [],",
            "                responses: {},",
            "                requestBody: {",
            "                    required: true,",
            "                    content: {",
            "                        'application/json': {",
            "                            schema: {",
            "                                type: 'object',",
            "                                required: [],",
            "                                properties: {}",
            "                            }",
            "                        }",
            "                    }",
            "                },",
            "                security: []",
            "            },",
            "            'options': {",
            "                tags: ['${2}', 'options'],",
            "                summary: 'Check which endpoints are available for working with ${1}',",
            "                description: '',",
            "                operationId: 'sendOptions',",
            "                parameters: [],",
            "                responses: {},",
            "                security: []",
            "            }",
            "        },",
            "        '/${1}/:${2}Id': {",
            "            'get': {",
            "                tags: ['${2}'],",
            "                summary: 'Fetches the ${2} with the ID matching the url parameter',",
            "                description: '',",
            "                operationId: 'get${2/^(.)(.*)/${1:/upcase}${2}/}ById',",
            "                parameters: [",
            "                    {",
            "                        name: '${2}Id',",
            "                        in: 'path',",
            "                        description: 'Unique id representing a ${2}',",
            "                        required: true,", 
            "                        schema: {",
            "                            type: 'string',",
            "                        },",
            "                    }",
            "                ],",
            "                responses: {},",
            "                security: [{ http: ['role:${2}'] }]",
            "            },",
            "            'put': {",
            "                tags: ['${2}'],",
            "                summary: 'Updates the ${2} at the ID given with the values provided',",
            "                description: '',",
            "                operationId: 'update${2/^(.)(.*)/${1:/upcase}${2}/}ById',",
            "                parameters: [",
            "                    {",
            "                        name: '${2}Id',",
            "                        in: 'path',",
            "                        description: 'Unique id representing a ${2}',",
            "                        required: true,",
            "                        schema: {",
            "                            type: 'string',",
            "                        }",
            "                    }",
            "                ],",
            "                requestBody: {",
            "                    required: true,",
            "                    content: {",
            "                        'application/json': {",
            "                            schema: {",
            "                                type: 'object',",
            "                                required: [],",
            "                                properties: {}",
            "                            }",
            "                        }",
            "                    }",
            "                },",
            "                responses: {},",
            "                security: [",
            "                    {",
            "                        http: ['role:admin', 'role:owner']",
            "                    }",
            "                ]",
            "            },",
            "            'delete': {",
            "                tags: ['${2}'],",
            "                summary: 'Deletes the ${2} with the given ID',",
            "                description: '',",
            "                operationId: 'delete${2/^(.)(.*)/${1:/upcase}${2}/}ById',",
            "                parameters: [",
            "                    {",
            "                        name: '${2}Id',",
            "                        in: 'path',",
            "                        description: 'Unique id representing a ${2}',",
            "                        required: true,",
            "                        schema: {",
            "                            type: 'string',",
            "                        },",
            "                    }",
            "                ],",
            "                responses: {},",
            "                security: [",
            "                    {",
            "                        http: ['role:admin', 'role:owner']",
            "                    }",
            "                ]",
            "            },",
            "            'options': {",
            "                tags: ['${2}', 'options'],",
            "                summary: 'Check which endpoints are available for working with an ${2}',",
            "                description: '',",
            "                operationId: 'sendOptions',",
            "                parameters: [",
            "                    {",
            "                        name: '${2}Id',",
            "                        in: 'path',",
            "                        description: 'Unique id representing a ${2}',",
            "                        required: true,",
            "                        schema: {",
            "                            type: 'string',",
            "                        },",
            "                    }",
            "                ],",
            "                responses: {},",
            "                security: []",
            "            }",
            "        }",
            "    }",
            "} as const;",
            "",
        ]
    },
    "Response Body":{
        "scope": "typescript",
        "prefix": "rbody",
        "body": [
            "${1:200}: {", 
            "    description: 'OK,',",
            "    content: {",
            "        '${2|application/json,text/plain,text/html|}': {",
            "            schema: {",
            "               ${0}",
            "            },",
            "        },",
            "    },",
            "}",
        ],
        "description": "Creates a HTTP method body when defining OpenAPI config - for the verbs property"
    },
    "Config Reference":{
        "scope": "typescript",
        "prefix": "$ref",
        "body": [
            "{ \\$ref: '#/components/${1|parameters,schemas|}/$0' }"
        ]
    },
    // Snippets for adding UI components
    "Add Template": {
        "scope": "typescript",
        "prefix": "lit",
        "body": [
            "import { html } from 'lit';",
            "import styles from './${TM_FILENAME_BASE}.css.js';",
            "",
            "interface ${3:${TM_FILENAME_BASE/^(.)|-(.)/${1:/upcase}${2:/upcase}/g}} {",
            "    $4",
            "}",
            "",
            "/**",
            " * $5",
            " * @param props - Display data",
            " */",
            "export function ${2:${TM_FILENAME_BASE/^(.)|-(.)/${1}${2:/upcase}/g}} (${6:props}:${3}) {",
            "    return html`$0`;",
            "}"
        ],
        "description": "Add a LitHTML component file skeleton"
    },
    "Add Sub Template": {
        "scope": "typescript",
        "prefix": "litfn",
        "body": [
            "interface ${2:Data} {",
            "    $3",
            "}",
            "",
            "/**",
            " * $4",
            " * @param props - Display data",
            " */",
            "${5| ,export |}function $1 (${6:props}:${2}) {",
            "    return html`$0`;",
            "}"
        ],
        "description": "Add a LitHTML component function"
    },
    "Add Component":{
        "scope": "typescript",
        "prefix": "cust",
        "body": [
            "import { LitElement, css, html } from 'lit';",
            "import { customElement } from 'lit/decorators.js';",
            "",
            "@customElement('${2:${TM_FILENAME_BASE}}')",
            "export class ${1:${TM_FILENAME_BASE/^(.)|-(.)/${1:/upcase}${2:/upcase}/g}} extends LitElement {",
            "    static styles = css`",
            "        * {",
            "           box-sizing: border-box;",
            "        }",
            "",
            "        $0",
            "    `;",
            "",
            "    protected render() {",
            "        return html`$3`;",
            "    }",
            "}",
            "",
            "declare global {",
            "    interface HTMLElementTagNameMap {",
            "        '$2': $1;",
            "    }",
            "}"
        ],
        "description": "Add a skeleton for a custom element"
    },
    "Story":{
        "scope": "typescript",
        "prefix": "stry",
        "body": [
            "import { Meta, StoryFn } from '@storybook/web-components';",
            "import { html } from 'lit';",
            "import { storyRenderer } from '../../../utils/storybook/story-renderer.js';",
            "import { $3, $4 } from './${2:${TM_FILENAME_BASE/(.*)\\..+$/$1/}}.js';",
            "",
            "export default {",
            "    title: '${3}${5}',",
            "    parameters: {",
            "        componentSubtitle: '$6',",
            "    },",
            "    decorators: [storyRenderer],",
            "} as Meta;",
            "",
            "const Template: StoryFn<$4> = (args) => $3(args);",
            "",
            "export const playground = Template.bind({});",
            "playground.args = {",
            "    $7",
            "};",
            "playground.argTypes = {",
            "    $8",
            "};",
            "",
            "$0",
        ],
        "description": "Adds the framework for a storybook story file"
    },
    "Test component":{
        "scope": "typescript",
        "prefix": "tststry",
        "body": [
            "import { storyRenderer } from '${1}../utils/storybook/story-renderer';",
            "import { ${2:base} } from '../${TM_FILENAME_BASE}.stories';",
            "",
            "test('${2:base}', ()=> {",
            "   expect(storyRenderer(${2:base})$3).$4toEqual($5);",
            "});",
        ],
        "description": "Adds the framework for to test storybook stories"
    },
    "Test story": {
        "scope": "typescript",
        "prefix": "tstfn",
        "body": [
            "test('${1:storyName}', ()=> {",
            "   expect(storyRenderer(${1:storyName})$2).${3|,not.|}toEqual($4);",
            "});"
        ],
        "description": "Adds a test() style test for a Storybook story"
    },
    "CSS path": {
        "scope": "typescript",
        "prefix": "csspath",
        "body": "'/styles${TM_DIRECTORY/(?:.*\\\\src\\\\ui\\\\components)*(?:\\\\)([a-z0-9-]*)/\\/$1/g}/$0${TM_FILENAME_BASE}.css',",
        "description": "Outputs the matching Styles path for the current folder"
    },
    // Generic Snippets
    "todo": {
        "scope": "html,css,typescript",
        "prefix": "todo",
        "body": "$BLOCK_COMMENT_START TODO: $0 - Ben Allen $BLOCK_COMMENT_END"
    },  
}
