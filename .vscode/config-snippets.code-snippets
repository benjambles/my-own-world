{
    // API Snippets
    "Resource Index":{
        "scope": "typescript",
        "prefix": "resource",
        "description": "Add a skeleton resource index file",
        "body": [
            "import { DataModel } from '${1}../../app.js';",
            "import config from './config.json' assert { type: 'json' };",
            "import { ${2:resourceName}Routes } from './routes.js';",
            "",
            "/**",
            "* Routes on /${2:resourceName} and /${2:resourceName}/*",
            "*/",
            "export default function ${2:resourceName}(dataModel:DataModel) {",
            "    return {",
            "        config,",
            "        accessMap: {$3},",
            "        routeHandlers: {",
            "            ...${2:resourceName}Routes(dataModel),",
            "            $0",
            "        }",
            "    }",
            "};"
        ]
    },
    "Route function": {
        "scope": "typescript",
        "prefix": "addRoute",
        "description": "Add a route function",
        "body": [
            "/**",
            "* $1",
            "* @route [${2:HTTPMethod}] /${3:path}",
            "*/",
            "export function $4(dbInstance): Middleware {",
            "    const defaultError = {",
            "        message: '$6',",
            "        status: 400,",
            "    };",
            "",
            "    return getPartsMiddleware(defaultError, async (ctx) => {",
            "       $0",
            "    });",
            "}",
        ]
    },
    "Query Function": {
        "scope": "typescript",
        "prefix": "addQuery",
        "description": "Add a new query function",
        "body": [
            "/**",
            "* $0",
            "*/",
            "export async function ${1:queryName}(${2:collection}, ${3:param1): Promise<${4}> {",
            "    const data = await ${2:collection}.${7:findOne}(",
            "        $8",
            "    );",
            "",
            "    return result('${5:error}', data);",
            "}",
        ]
    },
    // OPEN API snippets for config.json files
    "Add method": {
        "scope": "json",
        "prefix": "method",
        "body": [
            "\"${1|get,delete,post,put,update|}\": {", 
            "    \"tags\": [$2],",
            "    \"summary\": \"$3\",",
            "    \"description\": \"$4\",",
            "    \"operationId\": \"$5\",",
            "    \"consumes\": [],",
            "    \"produces\": [\"application/json\"],",
            "    \"parameters\": [],",
            "    \"responses\": {$6},",
            "    \"security\": [$7]",
            "}${0}", 
        ],
        "description": "Creates a HTTP method body when defining OpenAPI config - for the verbs property"
    },
    "Add Route": {
        "scope": "json",
        "prefix": "route",
        "body": [
            "{", 
            "    \"route\":\"$1\",", 
            "    \"verbs\": {",
            "        $0",
            "    }", 
            "}"
        ],
        "description": "Add a Route object"
    },
    "Route Config":{
        "scope": "json",
        "prefix": "cfg",
        "description": "A boilerplate snippet for creating a new resource",
        "body": [
            "{",
            "    \"info\": {",
            "        \"name\": \"${1/^(.)(.*)/${1:/upcase}${2}/}\",",
            "        \"description\": \"${0}Routes relating to the creation and management of ${1} for the platform.\"",
            "    },",
            "    \"paths\": [",
            "        {",
            "            \"route\": \"/${1:plural}\",",
            "            \"verbs\": {",
            "                \"get\": {",
            "                    \"tags\": [\"${2:singular}\"],",
            "                    \"summary\": \"Fetches all ${1} for the platform\",",
            "                    \"description\": \"\",",
            "                    \"operationId\": \"get${1/^(.)(.*)/${1:/upcase}${2}/}\",",
            "                    \"consumes\": [],",
            "                    \"produces\": [\"application/json\"],",
            "                    \"parameters\": [",
            "                        {",
            "                            \"name\": \"limit\",",
            "                            \"in\": \"query\",",
            "                            \"description\": \"How many records to fetch\",",
            "                            \"default\": 10,",
            "                            \"type\": \"integer\",",
            "                            \"format\": \"int64\"",
            "                        },",
            "                        {",
            "                            \"name\": \"offset\",",
            "                            \"in\": \"query\",",
            "                            \"description\": \"How many records to skip\",",
            "                            \"default\": 0,",
            "                            \"type\": \"integer\",",
            "                            \"format\": \"int64\"",
            "                        }",
            "                    ],",
            "                    \"responses\": {},",
            "                    \"security\": []",
            "                },",
            "                \"post\": {",
            "                    \"tags\": [\"${2}\"],",
            "                    \"summary\": \"Add a new ${2} to the platform\",",
            "                    \"description\": \"\",",
            "                    \"operationId\": \"create${2/^(.)(.*)/${1:/upcase}${2}/}\",",
            "                    \"consumes\": [\"application/json\"],",
            "                    \"produces\": [\"application/json\"],",
            "                    \"parameters\": [],",
            "                    \"responses\": {},",
            "                    \"security\": []",
            "                },",
            "                \"options\": {",
            "                    \"tags\": [\"${2}\", \"options\"],",
            "                    \"summary\": \"Check which endpoints are available for working with ${1}\",",
            "                    \"description\": \"\",",
            "                    \"operationId\": \"sendOptions\",",
            "                    \"consumes\": [],",
            "                    \"produces\": [\"application/json\"],",
            "                    \"parameters\": [],",
            "                    \"responses\": {},",
            "                    \"security\": []",
            "                }",
            "            },",
            "            \"paths\": [",
            "                {",
            "                    \"route\": \"/${1}/:${2}Id\",",
            "                    \"verbs\": {",
            "                        \"get\": {",
            "                            \"tags\": [\"${2}\"],",
            "                            \"summary\": \"Fetches the ${2} with the ID matching the url parameter\",",
            "                            \"description\": \"\",",
            "                            \"operationId\": \"get${2/^(.)(.*)/${1:/upcase}${2}/}ById\",",
            "                            \"consumes\": [],",
            "                            \"produces\": [\"application/json\"],",
            "                            \"parameters\": [",
            "                                {",
            "                                    \"name\": \"${2}Id\",",
            "                                    \"in\": \"path\",",
            "                                    \"description\": \"Unique id representing a ${2}\",",
            "                                    \"opts\": { \"required\": true },",
            "                                    \"type\": \"string\"",
            "                                }",
            "                            ],",
            "                            \"responses\": {},",
            "                            \"security\": [{ \"jwt\": [\"role:${2}\"] }]",
            "                        },",
            "                        \"put\": {",
            "                            \"tags\": [\"${2}\"],",
            "                            \"summary\": \"Updates the ${2} at the ID given with the values provided\",",
            "                            \"description\": \"\",",
            "                            \"operationId\": \"update${2/^(.)(.*)/${1:/upcase}${2}/}ById\",",
            "                            \"consumes\": [\"application/json\"],",
            "                            \"produces\": [\"application/json\"],",
            "                            \"parameters\": [",
            "                                {",
            "                                    \"name\": \"${2}Id\",",
            "                                    \"in\": \"path\",",
            "                                    \"description\": \"Unique id representing a ${2}\",",
            "                                    \"opts\": { \"required\": true },",
            "                                    \"type\": \"string\"",
            "                                }",
            "                            ],",
            "                            \"responses\": {},",
            "                            \"security\": [",
            "                                {",
            "                                    \"jwt\": [\"role:admin\", \"role:owner\"]",
            "                                }",
            "                            ]",
            "                        },",
            "                        \"delete\": {",
            "                            \"tags\": [\"${2}\"],",
            "                            \"summary\": \"Deletes the ${2} with the given ID\",",
            "                            \"description\": \"\",",
            "                            \"operationId\": \"delete${2/^(.)(.*)/${1:/upcase}${2}/}ById\",",
            "                            \"consumes\": [],",
            "                            \"produces\": [\"application/json\"],",
            "                            \"parameters\": [",
            "                                {",
            "                                    \"name\": \"${2}Id\",",
            "                                    \"in\": \"path\",",
            "                                    \"description\": \"Unique id representing a ${2}\",",
            "                                    \"opts\": { \"required\": true },",
            "                                    \"type\": \"string\"",
            "                                }",
            "                            ],",
            "                            \"responses\": {},",
            "                            \"security\": [",
            "                                {",
            "                                    \"jwt\": [\"role:admin\", \"role:owner\"]",
            "                                }",
            "                            ]",
            "                        },",
            "                        \"options\": {",
            "                            \"tags\": [\"${2}\", \"options\"],",
            "                            \"summary\": \"Check which endpoints are available for working with an ${2}\",",
            "                            \"description\": \"\",",
            "                            \"operationId\": \"sendOptions\",",
            "                            \"consumes\": [],",
            "                            \"produces\": [\"application/json\"],",
            "                            \"parameters\": [",
            "                                {",
            "                                    \"name\": \"${2}Id\",",
            "                                    \"in\": \"path\",",
            "                                    \"description\": \"Unique id representing a ${2}\",",
            "                                    \"opts\": { \"required\": true },",
            "                                    \"type\": \"string\"",
            "                                }",
            "                            ],",
            "                            \"responses\": {},",
            "                            \"security\": []",
            "                        }",
            "                    }",
            "                }",
            "            ]",
            "        }",
            "    ]",
            "}",
            "",
        ]
    },
    // Snippets for adding UI components
    "Add Component": {
        "scope": "typescript",
        "prefix": "lit",
        "body": [
            "import { html } from 'lit';",
            "import styles from './${TM_FILENAME_BASE}.css.js';",
            "",
            "interface ${3:${TM_FILENAME_BASE/^(.)|-(.)/${1:/upcase}${2:/upcase}/g}} {",
            "    $4",
            "}",
            "",
            "/**",
            " * $5",
            " * @param props - Display data",
            " */",
            "export function ${2:${TM_FILENAME_BASE/^(.)|-(.)/${1}${2:/upcase}/g}} (${6:props}:${3}) {",
            "    return html`$0`;",
            "}"
        ],
        "description": "Add a LitHTML component file skeleton"
    },
    "Add SubComponent": {
        "scope": "typescript",
        "prefix": "litfn",
        "body": [
            "interface ${2:Data} {",
            "    $3",
            "}",
            "",
            "/**",
            " * $4",
            " * @param props - Display data",
            " */",
            "${5| ,export |}function $1 (${6:props}:${2}) {",
            "    return html`$0`;",
            "}"
        ],
        "description": "Add a LitHTML component function"
    },
    "Story":{
        "scope": "typescript",
        "prefix": "stry",
        "body": [
            "import { Meta, StoryFn } from '@storybook/web-components';",
            "import { html } from 'lit';",
            "import { storyRenderer } from '../../../utils/storybook/story-renderer.js';",
            "import { $3, $4 } from './${2:${TM_FILENAME_BASE/(.*)\\..+$/$1/}}.js';",
            "",
            "export default {",
            "    title: '${3}${5}',",
            "    parameters: {",
            "        componentSubtitle: '$6',",
            "    },",
            "    decorators: [storyRenderer],",
            "} as Meta;",
            "",
            "const Template: StoryFn<$4> = (args) => $3(args);",
            "",
            "export const playground = Template.bind({});",
            "playground.args = {",
            "    $7",
            "};",
            "playground.argTypes = {",
            "    $8",
            "};",
            "",
            "$0",
        ],
        "description": "Adds the framework for a storybook story file"
    },
    "Test component":{
        "scope": "typescript",
        "prefix": "tststry",
        "body": [
            "import { storyRenderer } from '${1}../utils/storybook/story-renderer';",
            "import { ${2:base} } from '../${TM_FILENAME_BASE}.stories';",
            "",
            "test('${2:base}', ()=> {",
            "   expect(storyRenderer(${2:base})$3).$4toEqual($5);",
            "});",
        ],
        "description": "Adds the framework for to test storybook stories"
    },
    "Test story": {
        "scope": "typescript",
        "prefix": "tstfn",
        "body": [
            "test('${1:storyName}', ()=> {",
            "   expect(storyRenderer(${1:storyName})$2).${3|,not.|}toEqual($4);",
            "});"
        ],
        "description": "Adds a test() style test for a Storybook story"
    },
    "CSS path": {
        "scope": "typescript",
        "prefix": "csspath",
        "body": "'/styles${TM_DIRECTORY/(?:.*\\\\src\\\\ui\\\\components)*(?:\\\\)([a-z0-9-]*)/\\/$1/g}/$0${TM_FILENAME_BASE}.css'",
        "description": "Outputs the matching Styles path for the current folder"
    },
    // Generic Snippets
    "todo": {
        "scope": "html,css,typescript",
        "prefix": "todo",
        "body": "$BLOCK_COMMENT_START TODO: $0 - Ben Allen $BLOCK_COMMENT_END"
    },  
}
